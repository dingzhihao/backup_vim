" Auther: ssir
" Source: https://github.com/ssir/backup_vim
"

let g:iswindows=0
if (has("win32") || has ("win64") || has("win95") || has("win16"))
    let g:iswindows=1
endif

let g:isGUI=0
if has('gui_running')
    let g:isGUI=1
endif

"Basic conf {{{
    set nocompatible        " 禁用vi兼容模式
    
    set helplang=cn         " 帮助系统设置为中文，下载中文帮助包安装后，才会有效
    
    set encoding=utf-8      " 设置vim内部编码
    set fileencoding=utf-8  " 设置当前文件编码
    set fileencodings=ucs-bom,utf-8,gbk " 使用utf-8(无bom)或utf-8或gbk打开文件
    
    if g:iswindows
        source $VIMRUNTIME/delmenu.vim
        source $VIMRUNTIME/menu.vim
        language messages zh_CN.utf-8   "解决consle输出乱码
    endif
    if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
        set ambiwidth=double
    endif

    if g:isGUI
        let s:cguifont='Consolas:h9:cANSI'
        exec 'set guifont='  . s:cguifont

        set colorcolumn=80  " 在第80个字符处显示垂直界限
    else
        set t_Co=256        " 终端模式下，设置256色
    endif
    " set textwidth=78        " 设置一行允许插入的最大字符数，0值表示禁用此功能
    " set linebreak           " 整词换行

    set bs=2                " 在insert模式下用退格键删除
    set number              " 显示行号
    set autoread            " 文件在vim之外修改过，自动重新读入
    set cursorline          " 为光标所在行添加下划线
    
    " Set tab wodth {{      " 以下配置配合使用，设置tab和缩进空格数
        let g:tabwidth=4

        exec 'set expandtab'
        exec 'set shiftwidth='  . g:tabwidth
        exec 'set softtabstop=' . g:tabwidth
        exec 'set tabstop='     . g:tabwidth
    " }}

    filetype plugin indent on   " 打开文件类型检测
    syntax on               " 语法支持
    set showmatch           " 代码匹配
    set autoindent          " 开启自动缩进功能
    " set cindent             " 开启 C 语言缩进功能，默认关闭
    set smartindent         " 开启对C语言等类似语言的智能缩进功能，
                            " 较cindent出色，且在cindent关闭状态下有效，
                            " 配合autoindent使用
 
    set hls                 " 检索时高亮显示匹配项
    set ignorecase          " 检索时忽略大小写
    set incsearch           " 增量查找，会随着输入字符数而动态显示当前匹配字符
    
    " set foldmethod=syntax  "代码语法折叠
    
    " 标签页配置
    " use of tabs {{
    "   + 在vim中用 :tabnew filename 命令在新标签中打开名为 filename 的文件;
    "   + 使用 ctrl + [h | l] 切换标签页
    " }}
    " conf for tabs {{
        let mapleader = ','
        nnoremap <C-l> gt
        nnoremap <C-h> gT
        nnoremap <leader>t : tabe<CR>
    "}}

"}}}



" 插件配置
" conf for plugins {{{
    
    " pathogen是vim用来管理插件的插件
    " site: https://github.com/tpope/vim-pathogen
    " conf for pathogen {{
        execute pathogen#infect()
    "}}
    
    
    " silarzed主题配置
    " site: http://ethanschoonover.com/solarized/vim-colors-solarized
    " conf for vim-color-silarzed {{
        if g:isGUI
            " set background=light
            set background=dark
        else
            let g:solarized_termcolors=256
            let g:solarized_termtrans=1
            set background=dark
        endif
        let g:solarized_contrast="high"
        let g:solarized_visibility="high"
        colorscheme solarized
    "}}
    
    
    " 状态栏配置
    " site: https://github.com/Lokaltog/vim-powerline
    " conf for powerline {{
        set laststatus=2        " 总是显示状态行
        if g:isGUI
            " 设置字体
            set guifont=Consolas\ for\ Powerline:h9:cANSI,Ubuntu\ Mono\ for\ Powerline:h10:cANSI
            exec 'set guifont+='  . s:cguifont

            let g:Powerline_symbols='fancy'
        else
            let g:Powerline_symbols='unicode'
        endif
    "}}
    
    
    " 目录树配置
    " site: https://github.com/scrooloose/nerdtree
    " use of NERDTree {{
    "   + 使用 ctrl + f [打开 | 关闭]目录树
    "   + 在目录树中使用 ? [打开 | 关闭]帮助页
    " }}
    " conf for NERDTree {{
        map <C-f> :NERDTreeToggle<CR>
    "}}
    
    
    
    " ctags的使用（一般系统默认装有ctags，可直接使用）
    " use of ctages {{
    "   + 在命令行下用ctags -R命令在当前目录下生成标签索引文件，默认为tags。
    "   + 用vim编辑当前目录下文件时，若不指定tags文件位置，vim会在当前目录下寻找。找到后，可用以下快捷键进行跳转:
    "     - ctrl + ] ：跳转至光标所在对象定义之处
    "     - ctrl + t ：返回跳转前位置
    "     - [n +]ctrl + t ：[n]为数字，向回跳转n次；等价于重复n次ctrl-t操作
    "}}
    "
    " taglist配置
    " site: https://github.com/vim-scripts/taglist.vim
    " use of taglist {{
    "   + 当使用vim打开某个程序文件时，用 :Tlist [打开 | 关闭]taglist窗口(如果该程序具备类、接口、属性等元素，就会在taglist窗口显示出来)。
    " }}
    " conf for taglist {{
        let Tlist_Show_One_File = 1            "只显示当前文件的taglist，默认是显示多个
        let Tlist_Exit_OnlyWindow = 1          "如果taglist是最后一个窗口，则退出vim
        let Tlist_Use_Right_Window = 1         "在右侧窗口中显示taglist
        let Tlist_GainFocus_On_ToggleOpen = 1  "打开taglist时，光标保留在taglist窗口
        let Tlist_Auto_Update = 1              "自动更新Tlist
        " let Tlist_Ctags_Cmd='D:\Program Files (x86)\Vim\vim74\ctags.exe'  "设置ctags命令的位置
        nnoremap <leader>tl : Tlist<CR>        "设置关闭和打开taglist窗口的快捷键
    "}}
    
    
    " 书签配置
    " site: http://www.vim.org/scripts/download_script.php?src_id=4700
    " use of visualmark {{
    "   + 使用vim打开一个文件，使用快捷键mm设置书签（再次使用，取消书签），通过F2和shift+F2可以上下切换浏览。
    "}}
    
    
    " emmet配置
    " site: https://github.com/mattn/emmet-vim
    " use of emmet {{
    "   + ...
    " }}
    
    
    " markdown配置
    " site: https://github.com/plasticboy/vim-markdown
    " use of markdown {{
    "   - `]]`: go to next header. `<Plug>(Markdown_MoveToNextHeader)`
    "   - `[[`: go to previous header. Contrast with `]c`. `<Plug>(Markdown_MoveToPreviousHeader)`
    "   - `][`: go to next sibling header if any. `<Plug>(Markdown_MoveToNextSiblingHeader)`
    "   - `[]`: go to previous sibling header if any. `<Plug>(Markdown_MoveToPreviousSiblingHeader)`
    "   - `]c`: go to Current header. `<Plug>(Markdown_MoveToCurHeader)`
    "   - `]u`: go to parent header (Up). `<Plug>(Markdown_MoveToParentHeader)
    " }}
    " conf for markdown {{
        let g:vim_markdown_folding_disabled=1
    " }}
    
    
"}}}

" delete var {{{
    unlet! s:cguifont
"}}}

